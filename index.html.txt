<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>경은학교 급식</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
    <div id="root"></div>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script type="text/babel">
        const SimpleMealViewer = () => {
            const [weeklyMeals, setWeeklyMeals] = React.useState({});
            const [selectedDay, setSelectedDay] = React.useState(null);
            const [loading, setLoading] = React.useState(true);

            const fetchMealData = async (date) => {
                const formattedDate = date.replace(/-/g, '');
                try {
                    const response = await fetch(`/api/menu?date=${formattedDate}`);
                    const data = await response.json();
                    return data.menu || null;
                } catch (error) {
                    console.error('API 호출 실패:', error);
                    return null;
                }
            };

            const getThisMonday = () => {
                const today = new Date();
                const day = today.getDay();
                const diff = today.getDate() - day + (day === 0 ? -6 : 1);
                const monday = new Date(today.setDate(diff));
                return monday;
            };

            const loadWeekMeals = async () => {
                setLoading(true);
                const meals = {};
                const monday = getThisMonday();

                for (let i = 0; i < 5; i++) {
                    const currentDate = new Date(monday);
                    currentDate.setDate(monday.getDate() + i);
                    const dateStr = currentDate.toISOString().split('T')[0];
                    
                    const menuText = await fetchMealData(dateStr);
                    if (menuText) {
                        meals[dateStr] = {
                            date: dateStr,
                            weekday: ['월', '화', '수', '목', '금'][i],
                            menus: parseMenu(menuText)
                        };
                    }
                    await new Promise(resolve => setTimeout(resolve, 300));
                }

                setWeeklyMeals(meals);
                const firstDay = Object.keys(meals)[0];
                if (firstDay) setSelectedDay(firstDay);
                setLoading(false);
            };

            const parseMenu = (text) => {
                const allergyMap = {
                    '1': '난류', '2': '우유', '5': '대두', '6': '밀', '9': '새우',
                    '10': '돼지고기', '13': '아황산류', '15': '닭고기', '16': '쇠고기', '18': '조개류'
                };

                const lines = text.split('\n').filter(l => l.trim());
                return lines.map(line => {
                    const allergyMatch = line.match(/\(([\d.]+)\)/);
                    const allergies = allergyMatch 
                        ? allergyMatch[1].split('.').filter(a => a).map(a => allergyMap[a])
                        : [];
                    const name = line.replace(/\([\d.]+\)/g, '').trim();
                    const category = categorize(name);
                    return { name, allergies, category };
                });
            };

            const categorize = (name) => {
                if (name.includes('밥')) return 'rice';
                if (name.includes('국') || name.includes('탕') || name.includes('찌개')) return 'soup';
                if (name.includes('김치')) return 'kimchi';
                if (name.includes('과일') || name.includes('주스')) return 'dessert';
                return 'side';
            };

            const arrangeTray = (menus) => {
                const rice = menus.find(m => m.category === 'rice');
                const soup = menus.find(m => m.category === 'soup');
                const dessert = menus.find(m => m.category === 'dessert');
                const sides = menus.filter(m => m.category === 'side' || m.category === 'kimchi');
                
                return { 1: rice, 2: soup, 3: sides[0], 4: sides[1], 5: sides[2], 6: dessert };
            };

            React.useEffect(() => {
                loadWeekMeals();
            }, []);

            const categoryColors = {
                rice: 'bg-amber-100 border-amber-300',
                soup: 'bg-orange-100 border-orange-300',
                side: 'bg-green-100 border-green-300',
                kimchi: 'bg-red-100 border-red-300',
                dessert: 'bg-purple-100 border-purple-300'
            };

            const positionLabels = { 1: '밥', 2: '국', 3: '반찬1', 4: '반찬2', 5: '반찬3', 6: '후식' };

            if (loading) {
                return React.createElement('div', { className: 'min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center' },
                    React.createElement('div', { className: 'text-center' },
                        React.createElement('p', { className: 'text-xl font-bold text-gray-800' }, '이번 주 급식 불러오는 중...'),
                        React.createElement('p', { className: 'text-gray-600 mt-2' }, '잠시만 기다려주세요')
                    )
                );
            }

            return React.createElement('div', { className: 'min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-8' },
                React.createElement('div', { className: 'max-w-7xl mx-auto' },
                    React.createElement('div', { className: 'bg-white rounded-2xl shadow-lg p-6 mb-6' },
                        React.createElement('h1', { className: 'text-3xl font-bold text-gray-800 mb-2' }, '🍱 경은학교 이번 주 급식'),
                        React.createElement('p', { className: 'text-gray-600' }, '요일을 선택하세요')
                    ),
                    React.createElement('div', { className: 'flex gap-3 mb-6 overflow-x-auto pb-2' },
                        Object.entries(weeklyMeals).map(([date, meal]) =>
                            React.createElement('button', {
                                key: date,
                                onClick: () => setSelectedDay(date),
                                className: `flex-shrink-0 px-6 py-3 rounded-lg font-bold transition ${
                                    selectedDay === date ? 'bg-indigo-600 text-white shadow-lg scale-105' : 'bg-white text-gray-700'
                                }`
                            },
                                React.createElement('div', { className: 'text-lg' }, meal.weekday + '요일'),
                                React.createElement('div', { className: 'text-xs opacity-75 mt-1' }, 
                                    `${new Date(date).getMonth() + 1}/${new Date(date).getDate()}`
                                )
                            )
                        )
                    ),
                    selectedDay && weeklyMeals[selectedDay] && (() => {
                        const tray = arrangeTray(weeklyMeals[selectedDay].menus);
                        return React.createElement('div', { className: 'bg-white rounded-2xl shadow-lg p-8' },
                            React.createElement('h2', { className: 'text-2xl font-bold text-gray-800 mb-6' },
                                `${new Date(selectedDay).getMonth() + 1}월 ${new Date(selectedDay).getDate()}일 (${weeklyMeals[selectedDay].weekday}요일) 급식`
                            ),
                            React.createElement('div', { className: 'bg-gradient-to-br from-gray-100 to-gray-200 rounded-2xl p-8 shadow-inner' },
                                React.createElement('div', { className: 'space-y-4' },
                                    React.createElement('div', { className: 'grid grid-cols-3 gap-4' },
                                        [5, 4, 3].map(pos => React.createElement('div', {
                                            key: pos,
                                            className: `aspect-square rounded-xl border-4 p-4 flex flex-col items-center justify-center ${
                                                tray[pos] ? categoryColors[tray[pos].category] : 'bg-white border-gray-300 border-dashed'
                                            }`
                                        },
                                            tray[pos] ? [
                                                React.createElement('div', { className: 'text-xs text-gray-500 mb-2' }, positionLabels[pos]),
                                                React.createElement('p', { className: 'font-bold text-center mb-2' }, tray[pos].name),
                                                tray[pos].allergies.length > 0 && React.createElement('div', { className: 'flex flex-wrap gap-1 justify-center' },
                                                    tray[pos].allergies.map((allergy, i) => 
                                                        React.createElement('span', { 
                                                            key: i, 
                                                            className: 'text-xs bg-white px-2 py-0.5 rounded-full' 
                                                        }, allergy)
                                                    )
                                                )
                                            ] : React.createElement('span', { className: 'text-gray-400' }, positionLabels[pos])
                                        ))
                                    ),
                                    React.createElement('div', { className: 'grid grid-cols-3 gap-4' },
                                        [1, null, 2].map((pos, idx) => React.createElement('div', { key: idx, className: 'aspect-square' },
                                            pos && React.createElement('div', {
                                                className: `w-full h-full rounded-xl border-4 p-4 flex flex-col items-center justify-center ${
                                                    tray[pos] ? categoryColors[tray[pos].category] : 'bg-white border-gray-300 border-dashed'
                                                }`
                                            },
                                                tray[pos] ? [
                                                    React.createElement('div', { className: 'text-xs text-gray-500 mb-2' }, positionLabels[pos]),
                                                    React.createElement('p', { className: 'font-bold text-center mb-2' }, tray[pos].name),
                                                    tray[pos].allergies.length > 0 && React.createElement('div', { className: 'flex flex-wrap gap-1 justify-center' },
                                                        tray[pos].allergies.map((allergy, i) => 
                                                            React.createElement('span', { key: i, className: 'text-xs bg-white px-2 py-0.5 rounded-full' }, allergy)
                                                        )
                                                    )
                                                ] : React.createElement('span', { className: 'text-gray-400' }, positionLabels[pos])
                                            )
                                        ))
                                    )
                                )
                            )
                        );
                    })()
                )
            );
        };

        ReactDOM.render(React.createElement(SimpleMealViewer), document.getElementById('root'));
    </script>
</body>
</html>